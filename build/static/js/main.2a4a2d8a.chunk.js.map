{"version":3,"sources":["constants.ts","ThemeContext.ts","AppProperty.tsx","components/LineChart.tsx","components/WeaponSelector.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dayjs","extend","customParseFormat","Weapon","START_DATE","END_DATE","APP_FONT","Theme","WEAPONS","name","AK47","color","M4A4","M4A1_S","FAMAS","GALIL","SG556","AUG","MP9","AWP","DEAGLE","USPS","GLOCK","OTHER","DEFAULT_SELECTED_WEAPONS","withAppProperty","WrappedComponent","displayName","ComponentWithTheme","props","appProps","width","isMobile","Dimensions","get","computeScales","chartWidth","chartHeight","startDate","unix","endDate","scaleX","scaleTime","domain","range","scaleY","scaleLinear","getPathData","data","selectedWeapons","pathGenerator","line","x","d","date","y","value","paths","forEach","selectedWeapon","path","push","weapon","getXAxisLabels","months","diff","map","currDate","clone","add","label","month","format","undefined","getYAxisLabels","useState","setScaleX","setScaleY","xAxisLabels","setXAxisLabels","yAxisLabels","setYAxisLabels","setPaths","Animated","Value","chartOpacity","updateProperties","a","timing","toValue","duration","easing","Easing","inOut","ease","useNativeDriver","start","useEffect","then","console","log","catch","error","xAxis","height","index","fill","fontSize","fontWeight","textAnchor","fontFamily","toString","yAxis","x1","y1","x2","y2","stroke","strokeWidth","strokeLinecap","View","style","opacity","strokeLinejoin","ThemeContext","createContext","theme","Light","setTheme","warn","styles","StyleSheet","create","container","alignItems","flexDirection","flexWrap","itemContainer","marginRight","marginBottom","overflow","borderRadius","colorIndicator","weaponName","paddingHorizontal","weaponTextColorCode","useContext","item","selected","find","wep","items","setItems","onItemSelected","filter","maxWidth","onPress","prevState","TouchableOpacity","onMagicTap","backgroundColor","borderColor","borderWidth","Text","individualItemView","root","flex","paddingTop","paddingBottom","title","subtitle","link","lastUpdatedText","chartContainer","marginVertical","weaponSelectorContainer","themeSwitcherContainer","footerTextContainer","setSelectedWeapons","setData","fetch","res","json","Provider","minWidth","WepStats","Linking","openURL","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a4a2d8a.chunk.js","sourcesContent":["import dayjs from \"dayjs\";\nimport customParseFormat from \"dayjs/plugin/customParseFormat\";\n\ndayjs.extend(customParseFormat);\n\nexport const START_DATE = dayjs(\"01-01-2012\", \"DD-MM-YYYY\");\nexport const END_DATE = dayjs(\"01-01-2022\", \"DD-MM-YYYY\");\n\nexport const APP_FONT = \"Work Sans\";\n\nexport const WEAPON_COLOR_SCHEME = [\n  \"#264653\",\n  \"#2a9d8f\",\n  \"#e9c46a\",\n  \"#f4a261\",\n  \"#e76f51\",\n];\n\nexport enum Weapon {\n  P2000 = \"hkp2000\",\n  USPS = \"usp_silencer\",\n  M4A1_S = \"m4a1_silencer\",\n  MP7 = \"mp7\",\n  M4A4 = \"m4a1\",\n  MP9 = \"mp9\",\n  DEAGLE = \"deagle\",\n  AUG = \"aug\",\n  AK47 = \"ak47\",\n  CZ = \"cz75a\",\n  FIVE_SEVEN = \"fiveseven\",\n  GLOCK = \"glock\",\n  P90 = \"p90\",\n  GALIL = \"galilar\",\n  P250 = \"p250\",\n  AWP = \"awp\",\n  TEC9 = \"tec9\",\n  FAMAS = \"famas\",\n  UMP = \"ump45\",\n  SG556 = \"sg556\",\n  GRENADE = \"hegrenade\",\n  MAC10 = \"mac10\",\n  OTHER = \"other\",\n}\n\nexport const WEAPONS = [\n  { name: Weapon.AK47, color: \"#F94144\" },\n  { name: Weapon.M4A4, color: \"#F3722C\" },\n  { name: Weapon.M4A1_S, color: \"#ef476f\" },\n  { name: Weapon.FAMAS, color: \"#8d99ae\" },\n  { name: Weapon.GALIL, color: \"#F9C74F\" },\n  { name: Weapon.SG556, color: \"#a7b871\" },\n  { name: Weapon.AUG, color: \"#797d62\" },\n  { name: Weapon.MP9, color: \"#43AA8B\" },\n  { name: Weapon.AWP, color: \"#4D908E\" },\n  { name: Weapon.DEAGLE, color: \"#577590\" },\n  { name: Weapon.USPS, color: \"#277DA1\" },\n  { name: Weapon.GLOCK, color: \"#6c584c\" },\n  { name: Weapon.OTHER, color: \"#020100\" },\n];\n\nexport const DEFAULT_SELECTED_WEAPONS = [Weapon.AK47];\n","import { createContext, useContext } from \"react\";\n\nexport enum Theme {\n  Dark = \"Dark\",\n  Light = \"Light\",\n}\n\nexport type ThemeContextType = {\n  theme: Theme;\n  setTheme: (Theme: Theme) => void;\n};\n\nexport const ThemeContext = createContext<ThemeContextType>({\n  theme: Theme.Light,\n  setTheme: (theme) => console.warn(\"no theme provider\"),\n});\nexport const useTheme = () => useContext(ThemeContext);\n","import React from \"react\";\nimport { Dimensions } from \"react-native\";\nimport { isMobile } from \"react-device-detect\";\n\nexport interface AppProps {\n  width: number;\n}\n\nconst withAppProperty = <T extends AppProps>(\n  WrappedComponent: React.ComponentType<T>\n) => {\n  const displayName =\n    WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n\n  const ComponentWithTheme = (props: Omit<T, keyof AppProps>) => {\n    const appProps: AppProps = {\n      width: isMobile ? Dimensions.get(\"window\").width - 20 : 768,\n    };\n\n    // props comes afterwards so the can override the default ones.\n    return <WrappedComponent {...appProps} {...(props as T)} />;\n  };\n\n  ComponentWithTheme.displayName = `withAppProperty(${displayName})`;\n\n  return ComponentWithTheme;\n};\n\nexport default withAppProperty;\n","import React, { useEffect, useState } from \"react\";\nimport { scaleLinear, ScaleLinear, scaleTime, ScaleTime } from \"d3-scale\";\nimport { range } from \"underscore\";\nimport { Animated, Easing, View } from \"react-native\";\nimport { line } from \"d3-shape\";\nimport Svg, { G, Line, Path, Text as SvgText } from \"react-native-svg\";\nimport { APP_FONT, END_DATE, START_DATE, Weapon } from \"../constants\";\nimport { WeaponSelectorItem } from \"./WeaponSelector\";\nimport withAppProperty, { AppProps } from \"../AppProperty\";\n\ntype StatEntry = {\n  date: number;\n  value: number;\n};\n\nexport type WeaponStats = {\n  [key in Weapon]: StatEntry[];\n};\n\ntype ScaleX = ScaleTime<number, number>;\ntype ScaleY = ScaleLinear<number, number>;\n\ninterface LineChartProps extends AppProps {\n  data?: WeaponStats;\n  selectedWeapons: WeaponSelectorItem[];\n}\n\ntype LinePath = {\n  weapon: WeaponSelectorItem;\n  value: string;\n};\n\ntype AxisLabel = {\n  label?: string;\n  x: number;\n  y: number;\n};\n\nconst computeScales = (\n  chartWidth: number,\n  chartHeight: number\n): { scaleX: ScaleX; scaleY: ScaleY } => {\n  const startDate = START_DATE.unix();\n  const endDate = END_DATE.unix();\n\n  const scaleX: ScaleX = scaleTime()\n    .domain([startDate, endDate])\n    .range([20, chartWidth - 20]);\n\n  const scaleY: ScaleY = scaleLinear().domain([0, 60]).range([chartHeight, 0]);\n\n  return { scaleX, scaleY };\n};\n\nconst getPathData = (\n  data: WeaponStats,\n  selectedWeapons: WeaponSelectorItem[],\n  scaleX: ScaleX,\n  scaleY: ScaleY\n): LinePath[] => {\n  const pathGenerator = line<StatEntry>()\n    .x((d) => scaleX(d.date))\n    .y((d) => scaleY(d.value));\n\n  const paths: LinePath[] = [];\n\n  selectedWeapons.forEach((selectedWeapon) => {\n    // const sortedData = sortData(data, selectedWeapon.name as Weapon);\n    const path = pathGenerator(data[selectedWeapon.name as Weapon]);\n    if (path) {\n      paths.push({\n        weapon: selectedWeapon,\n        value: path,\n      });\n    }\n  });\n\n  return paths;\n};\n\nconst getXAxisLabels = (scaleX: ScaleX): AxisLabel[] => {\n  const months = END_DATE.diff(START_DATE, \"months\");\n\n  return range(months + 1).map((value) => {\n    const currDate = START_DATE.clone().add(value, \"month\");\n    return {\n      label: currDate.month() === 0 ? currDate.format(\"YYYY\") : undefined,\n      x: scaleX(currDate.unix()),\n      y: 5,\n    };\n  });\n};\n\nconst getYAxisLabels = (scaleY: ScaleY): AxisLabel[] => {\n  return [\n    {\n      label: \"10%\",\n      x: 0,\n      y: scaleY(10),\n    },\n    {\n      label: \"20%\",\n      x: 0,\n      y: scaleY(20),\n    },\n    {\n      label: \"30%\",\n      x: 0,\n      y: scaleY(30),\n    },\n    {\n      label: \"40%\",\n      x: 0,\n      y: scaleY(40),\n    },\n    {\n      label: \"50%\",\n      x: 0,\n      y: scaleY(50),\n    },\n  ];\n};\n\nconst LineChart = (props: LineChartProps) => {\n  const [scaleX, setScaleX] = useState<ScaleX>();\n  const [scaleY, setScaleY] = useState<ScaleY>();\n  const [xAxisLabels, setXAxisLabels] = useState<AxisLabel[]>([]);\n  const [yAxisLabels, setYAxisLabels] = useState<AxisLabel[]>([]);\n  const [paths, setPaths] = useState<LinePath[]>([]);\n  const [chartOpacity] = useState<Animated.Value>(new Animated.Value(0));\n\n  const updateProperties = async () => {\n    // Fetch scales.\n    const { scaleX, scaleY } = computeScales(props.width, 400);\n    setScaleX(() => scaleX);\n    setScaleY(() => scaleY);\n\n    // Fetch X and Y labels\n    const xAxisLabels = getXAxisLabels(scaleX);\n    const yAxisLabels = getYAxisLabels(scaleY);\n    setXAxisLabels(xAxisLabels);\n    setYAxisLabels(yAxisLabels);\n\n    // Fetch line paths for selected weapons\n    if (props.data) {\n      const paths = getPathData(\n        props.data,\n        props.selectedWeapons,\n        scaleX,\n        scaleY\n      );\n      setPaths(paths);\n    }\n\n    // Animate the chart opacity to 1.\n    Animated.timing(chartOpacity, {\n      toValue: 1,\n      duration: 500,\n      easing: Easing.inOut(Easing.ease),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  useEffect(() => {\n    updateProperties()\n      .then(() => {\n        console.log(\"Chart properties updated\");\n      })\n      .catch((error) => {\n        console.error(\"Error in updating chart properties\", error);\n      });\n  }, [props.data, props.selectedWeapons]);\n\n  const xAxis = (\n    <Svg width={props.width} height=\"20\">\n      <G>\n        {xAxisLabels.map((value, index) => (\n          <SvgText\n            key={index.toString()}\n            fill={value.label ? \"#000000\" : \"rgba(0,0,0,0.5)\"}\n            fontSize={value.label ? \"10\" : \"6\"}\n            fontWeight=\"bold\"\n            x={value.x}\n            y={value.y}\n            textAnchor=\"middle\"\n            fontFamily={APP_FONT}\n          >\n            {\".\"}\n          </SvgText>\n        ))}\n        {xAxisLabels.map((value, index) => (\n          <SvgText\n            key={index.toString()}\n            fill=\"black\"\n            fontSize=\"8\"\n            fontWeight=\"bold\"\n            x={value.x}\n            y={value.y + 10}\n            textAnchor=\"middle\"\n            fontFamily={APP_FONT}\n          >\n            {value.label}\n          </SvgText>\n        ))}\n      </G>\n    </Svg>\n  );\n\n  const yAxis = (\n    <G>\n      {yAxisLabels.map((value, index) => (\n        <G key={value.label}>\n          <SvgText\n            key={index.toString()}\n            fill={\"rgba(0,0,0,0.3)\"}\n            fontSize=\"8\"\n            fontWeight=\"bold\"\n            x={value.x + 20}\n            y={value.y - 5}\n            textAnchor=\"middle\"\n            fontFamily={APP_FONT}\n          >\n            {value.label}\n          </SvgText>\n          <Line\n            x1={scaleX !== undefined ? scaleX?.range()[0] - 10 : 0}\n            y1={value.y}\n            x2={scaleX?.range()[1]}\n            y2={value.y}\n            stroke=\"rgba(0,0,0,0.08)\"\n            strokeWidth=\"1\"\n            strokeLinecap={\"round\"}\n          />\n        </G>\n      ))}\n    </G>\n  );\n\n  return (\n    <Animated.View style={{ opacity: chartOpacity }}>\n      <Svg width={props.width} height=\"400\">\n        {paths.map((path) => (\n          <Path\n            key={path.weapon.name}\n            d={path.value}\n            fill=\"none\"\n            stroke={path.weapon.color}\n            strokeWidth=\"2\"\n            strokeLinejoin=\"round\"\n            strokeLinecap=\"round\"\n          />\n        ))}\n        {yAxis}\n      </Svg>\n      {xAxis}\n    </Animated.View>\n  );\n};\n\nexport default withAppProperty(LineChart);\n","import React, { useEffect, useState } from \"react\";\nimport { StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\nimport { random } from \"underscore\";\nimport {\n  APP_FONT,\n  DEFAULT_SELECTED_WEAPONS,\n  Weapon,\n  WEAPON_COLOR_SCHEME,\n  WEAPONS,\n} from \"../constants\";\nimport withAppProperty, { AppProps } from \"../AppProperty\";\nimport { Theme, useTheme } from \"../ThemeContext\";\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: \"baseline\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n  },\n  itemContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginRight: 8,\n    marginBottom: 8,\n    overflow: \"hidden\",\n    borderRadius: 2,\n  },\n  colorIndicator: {\n    width: 20,\n    height: 20,\n  },\n  weaponName: {\n    fontSize: 14,\n    fontFamily: APP_FONT,\n    paddingHorizontal: 4,\n  },\n});\n\nexport type WeaponSelectorItem = {\n  color: string;\n  name: string;\n  selected: boolean;\n};\n\ninterface WeaponSelectorProps extends AppProps {\n  onItemSelected: (items: WeaponSelectorItem[]) => void;\n}\n\nexport const getDefaultItemList = (): WeaponSelectorItem[] => {\n  return WEAPONS.map((item) => ({\n    ...item,\n    selected: !!DEFAULT_SELECTED_WEAPONS.find((wep) => wep === item.name),\n  }));\n};\n\nconst WeaponSelector = (props: WeaponSelectorProps) => {\n  const { theme } = useTheme();\n\n  const weaponTextColorCode = theme === Theme.Light ? 0 : 255;\n\n  const [items, setItems] = useState<WeaponSelectorItem[]>(\n    getDefaultItemList()\n  );\n\n  useEffect(() => {\n    props.onItemSelected(items.filter((value) => value.selected) || []);\n  }, []);\n\n  const individualItemView = (item: WeaponSelectorItem) => {\n    const onPress = () => {\n      setItems((prevState) => {\n        const items = prevState.map((value) => ({\n          ...value,\n          selected: item.name === value.name ? !value.selected : value.selected,\n        }));\n        props.onItemSelected(items.filter((value) => value.selected) || []);\n        return items;\n      });\n    };\n\n    return (\n      <TouchableOpacity key={item.name} onMagicTap={onPress} onPress={onPress}>\n        <View\n          style={[\n            styles.itemContainer,\n            {\n              backgroundColor: item.selected\n                ? \"rgba(222,226,230,0.3)\"\n                : \"rgba(222,226,230,0.2)\",\n              borderColor: item.selected ? item.color : undefined,\n              borderWidth: item.selected ? 1 : undefined,\n            },\n          ]}\n        >\n          <View\n            style={[\n              styles.colorIndicator,\n              {\n                backgroundColor: item.color,\n                opacity: item.selected ? 1 : 0.2,\n              },\n            ]}\n          />\n          <Text\n            style={[\n              styles.weaponName,\n              {\n                color: item.selected\n                  ? `rgba(${weaponTextColorCode},${weaponTextColorCode},${weaponTextColorCode},1)`\n                  : `rgba(${weaponTextColorCode},${weaponTextColorCode},${weaponTextColorCode},0.35)`,\n              },\n            ]}\n          >\n            {item.name}\n          </Text>\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  return (\n    <View style={[styles.container, { maxWidth: props.width }]}>\n      {items.map((value) => individualItemView(value))}\n    </View>\n  );\n};\n\nexport default withAppProperty(WeaponSelector);\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Linking,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\nimport WepStats from \"./weapon_stats_monthly_avg.json\";\nimport LineChart, { WeaponStats } from \"./components/LineChart\";\nimport { APP_FONT, END_DATE, START_DATE } from \"./constants\";\nimport WeaponSelector, {\n  WeaponSelectorItem,\n} from \"./components/WeaponSelector\";\nimport withAppProperty, { AppProps } from \"./AppProperty\";\nimport ThemeSwitcher from \"./components/ThemeSwitcher\";\nimport { Theme, ThemeContext } from \"./ThemeContext\";\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    paddingTop: 60,\n    paddingBottom: 16,\n    paddingHorizontal: 16,\n    alignItems: \"center\",\n  },\n  title: {\n    fontSize: 40,\n    fontWeight: \"bold\",\n    fontFamily: APP_FONT,\n  },\n  subtitle: {\n    fontSize: 12,\n    fontFamily: APP_FONT,\n  },\n  link: {\n    fontSize: 12,\n    fontFamily: APP_FONT,\n    color: \"#5390d9\",\n  },\n  lastUpdatedText: {\n    fontSize: 10,\n    fontWeight: \"bold\",\n    fontFamily: APP_FONT,\n  },\n  chartContainer: {\n    marginVertical: 10,\n    paddingBottom: 10,\n    backgroundColor: \"rgba(222,226,230,0.3)\",\n    borderRadius: 4,\n  },\n  weaponSelectorContainer: {\n    marginVertical: 10,\n  },\n  themeSwitcherContainer: {\n    alignItems: \"center\",\n  },\n  footerTextContainer: {\n    flexDirection: \"row\",\n  },\n});\n\nconst getMonthlyAvgData = (): Promise<WeaponStats> => {\n  return fetch(\n    \"https://raw.githubusercontent.com/crazyhitty/hltv-scraping/master/data/weapon_stats_monthly_avg.json?token=AB5SKSEJMB6PD7H2ZNYNZ23AHM5KQ\"\n  ).then((res) => res.json());\n};\n\nconst App = (props: AppProps) => {\n  const [theme, setTheme] = useState(Theme.Light);\n  const [selectedWeapons, setSelectedWeapons] = useState<WeaponSelectorItem[]>(\n    []\n  );\n  const [data, setData] = useState<WeaponStats>();\n\n  useEffect(() => {\n    getMonthlyAvgData()\n      .then((data) => {\n        console.log(\"yoyo\", data);\n        setData(data);\n      })\n      .catch((error) => {\n        console.error(\"noooooo\", error);\n      });\n  }, []);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <View\n        style={[\n          styles.root,\n          { backgroundColor: theme === Theme.Light ? \"white\" : \"black\" },\n        ]}\n      >\n        <View style={{ minWidth: props.width }}>\n          <Text\n            style={[\n              styles.title,\n              { color: theme === Theme.Light ? \"black\" : \"white\" },\n            ]}\n          >\n            {\"CSGO Weapon Usage in Esports Events\"}\n          </Text>\n          <Text\n            style={[\n              styles.subtitle,\n              { color: theme === Theme.Light ? \"black\" : \"white\" },\n            ]}\n          >{`Monthly data from Aug 2012 - March 2021`}</Text>\n          <View style={styles.chartContainer}>\n            <LineChart data={WepStats} selectedWeapons={selectedWeapons} />\n          </View>\n          <View style={styles.weaponSelectorContainer}>\n            <WeaponSelector\n              onItemSelected={(items) => setSelectedWeapons(items)}\n            />\n          </View>\n          <View style={styles.footerTextContainer}>\n            <Text\n              style={[\n                styles.subtitle,\n                { color: theme === Theme.Light ? \"black\" : \"white\" },\n              ]}\n            >\n              {`Data scraped from `}\n            </Text>\n            <TouchableOpacity\n              onPress={() => {\n                Linking.openURL(\"https://www.hltv.org/stats\");\n              }}\n            >\n              <Text style={styles.link}>{\"hltv.org\"}</Text>\n            </TouchableOpacity>\n          </View>\n          {/*Theme switcher currently disabled*/}\n          {/*<View style={styles.themeSwitcherContainer}>*/}\n          {/*  <ThemeSwitcher/>*/}\n          {/*</View>*/}\n        </View>\n      </View>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default withAppProperty(App);\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}